#load the WIOD dataset
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/WIOT_Cleaned_Country.Rda")
#The first level is the year, so there are 15 years
length(norm_a_list_all)
n_years <- length(norm_a_list_all)
#The second level is country, so there are 44 countries
length(norm_a_list_all[[1]])
n_countries <- length(norm_a_list_all[[1]])
##this is the A matrix for year 1 country 1
dim(norm_a_list_all[[1]][[1]])
##I want to make each and every A matrix into a Leontief matrix by adding the power series upto the 4th power
######
# A matrix to the first power
######
first <- norm_a_list_all
#####
# A matrix to the second power
#####
second <- norm_a_list_all
for(i in 1:n_years){
for(j in 1:n_countries){
second[[i]][[j]] <- (norm_a_list_all[[i]][[j]]) %^% 2
}
}
#####
# A matrix to the third power
#####
third <- norm_a_list_all
for(i in 1:n_years){
for(j in 1:n_countries){
third[[i]][[j]] <- (norm_a_list_all[[i]][[j]]) %^% 3
}
}
#####
# A matrix to the fourth power
#####
fourth <- norm_a_list_all
for(i in 1:n_years){
for(j in 1:n_countries){
fourth[[i]][[j]] <- (norm_a_list_all[[i]][[j]]) %^% 4
}
}
#####
# the Leontief matrix
#####
leontief <- norm_a_list_all
for(i in 1:n_years){
for(j in 1:n_countries){
leontief[[i]][[j]] <- first[[i]][[j]]+second[[i]][[j]]+third[[i]][[j]]+fourth[[i]][[j]]
}
}
#################################
##Exploring the Leontief matrices
#################################
### taken from ?Reduce
#this function will add a list of matrices
add <- function(x) Reduce("+", x)
##########
#rowsums
##########
row_sum_leon <- norm_a_list_all
for(i in 1:n_years){
for(j in 1:n_countries){
row_sum_leon[[i]][[j]] <- rowSums(leontief[[i]][[j]])
}
}
str(row_sum_leon)
#first level is 15 years
#second level is 44 countries
#I want a list of 15 elements, where each element is a vector of row sum values from 44 countries, for each year
rowsums_eachyear_leon_list <- c()
for(i in 1:n_years){
rowsums_eachyear_leon_list[[i]] <- unlist(as.vector(row_sum_leon[[i]]))
}
#making a country identifier, so now each element in rowsums_eachyear_leon_list has 2 columns, where the first is the row sum variable itself and the second is the country identifier.
country_identifier <- c()
for(i in 1:n_years){
for(j in 1:n_countries){
country_identifier <- c(country_identifier, c(length(row_sum_leon[[i]][[j]])))
}
}
#repeat matrix takes the n_years*n_countries values of temp and puts them in a matrix, where each column corresponds to a unique year. Thus each column of this matrix will be the number of times each country id has to be repeated in a given year
repeat_matrix <- matrix(country_identifier,
nrow = n_countries,
ncol = n_years,
byrow = F)
##Now I make a list for just country id, this also has 15 elements for each year
c_id_list <- list()
for(i in 1:n_years){
c_id_list[[i]] <- rep(1:n_countries,
times = repeat_matrix[,i])
}
##Now I make the final data set by pairing each country id vector with the rowsum vector for that year
for(i in 1:n_years){
rowsums_eachyear_leon_list[[i]] <- cbind(rowsums_eachyear_leon_list[[i]],
c_id_list[[i]])
}
#We expect a list of length 15, where each element is a long matrix with 2 columns, the first is the rowsum vector for that year and the second is the country id
str(rowsums_eachyear_leon_list)
save(rowsums_eachyear_leon_list,
"/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
save(rowsums_eachyear_leon_list,
file = "/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
rm(list = ls())
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
statistic <- c()
levels_id_indicator <- c()
for(i in 1:15){
statistic <- c(statistic,
unlist(rowsums_eachyear_leon_list[[i]][,1]))
levels_id_indicator <- c(levels_id_indicator,
unlist(rowsums_eachyear_leon_list[[i]][,2]))
}
cbind(statistic,levels_id_indicator)
library(wiodbayes)
fit12 <- fit_wiod(statistic = statistic,
model = "exponential",
pooling = "none")
fit12 <- fit_wiod(statistic = statistic,
model = "exponential",
pooling = "complete")
library(wiodbayes)
fit12 <- fit_wiod(statistic = statistic,
model = "exponential",
pooling = "complete")
library(wiodbayes)
fit12 <- fit_wiod(statistic = statistic,
model = "exponential",
pooling = "complete")
fit12
library(wiodbayes)
fit13 <- fit_wiod(statistic = statistic,
model = "exponential",
pooling = "partial")
fit13 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "exponential",
pooling = "partial")
library(wiodbayes)
fit13 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "exponential",
pooling = "partial")
fit13
library(wiodbayes)
fit14 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "exponential",
pooling = "none")
fit14
4%2
4%.%2
4%%2
library(wiodbayes)
fit15 <- fit_wiod(statistic = statistic,
model = "weibull",
pooling = "complete")
library(wiodbayes)
library(wiodbayes)
fit15 <- fit_wiod(statistic = statistic,
model = "weibull",
pooling = "complete")
library(wiodbayes)
fit15 <- fit_wiod(statistic = statistic,
model = "weibull",
pooling = "complete")
library(wiodbayes)
fit15 <- fit_wiod(statistic = statistic,
model = "weibull",
pooling = "complete")
fit15
library(wiodbayes)
fit16 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "weibull",
pooling = "partial")
fit16
library(wiodbayes)
library(wiodbayes)
fit17 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "weibull",
pooling = "none")
fit17
?fit_wiod
library(wiodbayes)
?fit_wiod
?selecgt
?select
library(dplyr)
?filter
?dplyr::filter
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
statistic <- c()
levels_id_indicator <- c()
for(i in 1:15){
statistic <- c(statistic,
unlist(rowsums_eachyear_leon_list[[i]][,1]))
levels_id_indicator <- c(levels_id_indicator,
unlist(rowsums_eachyear_leon_list[[i]][,2]))
}
cbind(statistic,levels_id_indicator)
library(wiodbayes)
fit11 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "gamma",
pooling = "none")
fit11
library(wiodbayes)
fit11 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "gamma",
pooling = "none")
library(wiodbayes)
fit6 <- fit_wiod(statistic = statistic,
model = "skew_normal",
pooling = "complete")
fit6
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
library(wiodbayes)
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
library(wiodbayes)
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
library(wiodbayes)
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
library(wiodbayes)
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
######
#checking the skew normal no pooling fit
######
fit8 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "none")
library(wiodbayes)
fit8 <- fit_wiod(statistic = statistic,
))))
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
library(wiodbayes)
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
statistic <- c()
levels_id_indicator <- c()
for(i in 1:15){
statistic <- c(statistic,
unlist(rowsums_eachyear_leon_list[[i]][,1]))
levels_id_indicator <- c(levels_id_indicator,
unlist(rowsums_eachyear_leon_list[[i]][,2]))
}
cbind(statistic,levels_id_indicator)
fit7 <- fit_wiod(statistic = statistic,
levels_id_vector = levels_id_indicator,
model = "skew_normal",
pooling = "partial")
?contains
??contains
?dplyr::select
?dplyr::select
library(wiodbayes)
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
statistic <- c()
levels_id_indicator <- c()
for(i in 1:15){
statistic <- c(statistic,
unlist(rowsums_eachyear_leon_list[[i]][,1]))
levels_id_indicator <- c(levels_id_indicator,
unlist(rowsums_eachyear_leon_list[[i]][,2]))
}
cbind(statistic,levels_id_indicator)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
library(wiodbayes)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
install.packages("loo")
library(loo)
install.packages("loo")
install.packages("loo")
library(loo)
library(wiodbayes)
library(wiodbayes)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
statistic <- c()
levels_id_indicator <- c()
for(i in 1:15){
statistic <- c(statistic,
unlist(rowsums_eachyear_leon_list[[i]][,1]))
levels_id_indicator <- c(levels_id_indicator,
unlist(rowsums_eachyear_leon_list[[i]][,2]))
}
cbind(statistic,levels_id_indicator)
###########################
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
library(wiodbayes)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
fit1
summary(fit1)
dim(fit1)
log_lik_1 <- extract_log_lik(fit1, merge_chains = F)
log_lik_1
library("loo")
?loo
options(mc.cores = NUMBER)
detectCores()
library("rstan")
parallel::detectCores()
library(wiodbayes)
?loo_wiod
library(wiodbayes)
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/rda_files/wiodbayes_package_test_data.Rda")
statistic <- c()
levels_id_indicator <- c()
for(i in 1:15){
statistic <- c(statistic,
unlist(rowsums_eachyear_leon_list[[i]][,1]))
levels_id_indicator <- c(levels_id_indicator,
unlist(rowsums_eachyear_leon_list[[i]][,2]))
}
cbind(statistic,levels_id_indicator)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
summary(fit1)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
summary(fit1)
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
summary(fit1)
dim(fit1)
names(fit1)
######
# loo cv checking here
######
loo_wiod(fit1)
log_lik_1 <- extract_log_lik(fit1, merge_chains = FALSE)
r_eff <- relative_eff(exp(log_lik_1))
fit1 <- fit_wiod(statistic,
model = "normal",
pooling = "complete")
######
# loo cv checking here
######
loo_wiod(fit1)
library(wiodbayes)
library(wiodbayes)
fit <- fit_wiod(statistic,
levels_id_vector = levels_id_vector,
model = "gamma",
pooling = "none")
load("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/wiod_final_data/wiod_final_data.Rda")
#
##########
# L_FL
##########
##making the statistic and the indicator vector for all models
statistic <- c(unlist(wiod_final_data[[1]]))
levels_id_vector <- c(wiod_final_data[[5]])
country_id <- wiod_final_data[[6]][1:43]
fit <- fit_wiod(statistic,
levels_id_vector = levels_id_vector,
model = "gamma",
pooling = "none")
##-------------------------------------------------------------------------------##
#91 to 91+2244-1 is all the predicted values
length(names(fit))
names(fit)
pred <- colMeans(as.data.frame(fit)[87:c(87+2244-1)])
pdf("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/leontief_FL_pred.pdf",
height = 15, width = 11)
par(mfrow = c(9,5))
for(i in 1:43){
hist(statistic[levels_id_vector == i],
col = "gray",
breaks = 20,
main = paste0(country_id[i]),
xlab = paste0("leon FL ", country_id[i]),
ylab = NA,
ylim = c(0,0.8),
xlim = c(1,10),
freq = F)
lines(density(pred[levels_id_vector == i]),
col = "red")
}
dev.off()
fit <- fit_wiod(statistic,
levels_id_vector = levels_id_vector,
model = "gamma",
pooling = "complete")
##-------------------------------------------------------------------------------##
#
names(fit)
pred <- colMeans(as.data.frame(fit)[3:c(3+2244-1)])
pdf("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/leontief_FL_pred.pdf",
height = 15, width = 11)
par(mfrow = c(9,5))
for(i in 1:43){
hist(statistic[levels_id_vector == i],
col = "gray",
breaks = 20,
main = paste0(country_id[i]),
xlab = paste0("leon FL ", country_id[i]),
ylab = NA,
ylim = c(0,0.8),
xlim = c(1,10),
freq = F)
lines(density(pred[levels_id_vector == i]),
col = "red")
}
dev.off()
fit <- fit_wiod(statistic,
levels_id_vector = levels_id_vector,
model = "gamma",
pooling = "partial")
pdf("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/leontief_FL_pred.pdf",
height = 15, width = 11)
par(mfrow = c(9,5))
for(i in 1:43){
hist(statistic[levels_id_vector == i],
col = "gray",
breaks = 20,
main = paste0(country_id[i]),
xlab = paste0("leon FL ", country_id[i]),
ylab = NA,
ylim = c(0,0.8),
xlim = c(1,10),
freq = F)
lines(density(pred[levels_id_vector == i]),
col = "red")
}
dev.off()
names(fit)
?rgamma
fit <- fit_wiod(statistic,
levels_id_vector = levels_id_vector,
model = "gamma",
pooling = "partial")
names(fit)
pred <- colMeans(as.data.frame(fit)[89:c(89+2244-1)])
pdf("/Users/Advait/Desktop/New_School/JH_networks/extra_storage_wiod_bayes/leontief_FL_pred.pdf",
height = 15, width = 11)
par(mfrow = c(9,5))
for(i in 1:43){
hist(statistic[levels_id_vector == i],
col = "gray",
breaks = 20,
main = paste0(country_id[i]),
xlab = paste0("leon FL ", country_id[i]),
ylab = NA,
ylim = c(0,0.8),
xlim = c(1,10),
freq = F)
lines(density(pred[levels_id_vector == i]),
col = "red")
}
dev.off()
min_max_vals <- matrix(NA,
nrow = 43,
ncol = 2)
for(i in 1:43){
min_max_vals[i,1] <- min(statistic[levels_id_vector[i]])
min_max_vals[i,2] <- max(statistic[levels_id_vector[i]])
}
min_max_vals
statistic
min(statistic[levels_id_vector[1]])
statistic[levels_id_vector[1]]
statistic[levels_id_vector[1]]
levels_id_vector[1]
levels_id_vector[2]
levels_id_vector
levels
levels_id_vector[1]
levels_id_vector[1000]
length(levels_id_vector[1000])
wiod_final_data[[1]]
wiod_final_data[[5]]
length(wiod_final_data[[1]])
length(wiod_final_data[[1]][[1]])
getwd()
